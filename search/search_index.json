{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the Delta Widgets Wiki</p> <p>Delta Widgets is a widget maker for Windows (for now), built with Tauri and Rust. It lets you create desktop widgets with drag &amp; drop, custom HTML/CSS, and dynamic data \u2014 all without needing to write code.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Drag-and-Drop Builder: No coding needed; place components like containers, grids, text, images, progress bars, sliders, or media actions.</li> <li>Multiple Sources: Choose between Visual Editor, HTML, or URL for widget creation.</li> <li>Custom Templates: Start from pre-built widget layouts or design your own.</li> <li>Dynamic Data: Widgets can display system info, current time, or media playback details.</li> <li>Expressions &amp; Variables: Use handlebar-like syntax to embed variables inside text or images.</li> <li>Extensibility: Future plan includes custom buttons and more widget actions.</li> <li>Tauri Integration: Access to native commands for system/media info inside HTML widgets.</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#desktop","title":"Desktop","text":""},{"location":"#main-window","title":"Main window","text":""},{"location":"#creator-window","title":"Creator window","text":""},{"location":"#templates","title":"Templates","text":"<p>Happy widget building!</p>"},{"location":"commands/","title":"Tauri Commands","text":"<p>Delta Widgets uses Tauri's <code>invoke</code> API to bridge the frontend (UI) with Rust backend logic. Here's a list of available commands, their purpose, and usage examples.</p> <p>Note</p> <p>To use</p> <pre><code>import { invoke } from \"@tauri-apps/api/core\";\n</code></pre> <p>your app must be built using a frontend bundler (like Vite or Webpack).</p> <p>If you're running in a raw browser (before build), use:</p> <pre><code>window.__TAURI__.invoke(\"command_name\", args)\n</code></pre>"},{"location":"commands/#command-reference","title":"Command Reference","text":"Command Description Parameters Returns <code>get_system_info</code> Get system info like CPU, RAM, uptime. None Promise&lt;SystemInfo&gt; <code>get_media</code> Fetch currently playing media details. None Promise&lt;MediaObject[]&gt; <code>media_action</code> Fetch currently playing media details. MediaAction Promise&lt;void&gt;"},{"location":"commands/#systeminfo","title":"SystemInfo","text":"Parameter Type Description <code>total_memory</code> Number Total memory available in bytes <code>used_memory</code> Number Used memory in bytes <code>total_swap</code> Number Total swap memory in bytes <code>used_swap</code> Number Used swap memory in bytes <code>os_version</code> String Operating system version <code>os_name</code> String Operating system name <code>kernel_version</code> String Kernel version <code>hostname</code> String System hostname <code>disks</code> Array List of disk information <code>batteries</code> Array List of battery information <code>cpus</code> Array List of CPU information <code>cpu</code> Object CPU summary containing count, speed, usage and brand <code>networks</code> Array List of network interfaces"},{"location":"commands/#mediaobject","title":"MediaObject","text":"Parameter Type Description <code>title</code> String Title of the media <code>artist</code> String Artist name <code>thumbnail</code> Number[] Binary data of the media thumbnail <code>playback_info</code> MediaPlaybackInfo? Optional playback information <code>player</code> MediaPlayerInfo? Optional media player information <code>player_id</code> String Unique identifier for the player <code>timeline_properties</code> MediaTimelineProperties? Optional timeline properties <code>is_current_session</code> bool Indicates if this is the current session"},{"location":"commands/#mediaplaybackinfo","title":"MediaPlaybackInfo","text":"Parameter Type Description <code>controls</code> MediaPlaybackControls Playback control states <code>status</code> String Current playback status <code>is_shuffle</code> bool Whether shuffle mode is active"},{"location":"commands/#mediaplaybackcontrols","title":"MediaPlaybackControls","text":"Parameter Type Description <code>play_enabled</code> bool Whether play control is enabled <code>pause_enabled</code> bool Whether pause control is enabled <code>stop_enabled</code> bool Whether stop control is enabled <code>next_enabled</code> bool Whether next track control is enabled <code>prev_enabled</code> bool Whether prev track control is enabled <code>toggle_enabled</code> bool Whether toggle control is enabled <code>shuffle_enabled</code> bool Whether shuffle control is enabled <code>repeat_enabled</code> bool Whether repeat control is enabled"},{"location":"commands/#mediatimelineproperties","title":"MediaTimelineProperties","text":"Parameter Type Description <code>start_time</code> u128 Start time of the media <code>end_time</code> u128 End time of the media <code>position</code> u128 Current position in the timeline"},{"location":"commands/#mediaplayerinfo","title":"MediaPlayerInfo","text":"Parameter Type Description <code>name</code> String Name of the media player <code>icon</code> Number[] Binary data of the player icon"},{"location":"commands/#mediaaction","title":"MediaAction","text":"Parameter Type Description <code>player_id</code> String Unique identifier for the player <code>action</code> \"play\" | \"pause\" | \"toggle\" | \"next\" | \"prev\" | \"position\" The media action to perform <code>position</code> Option&lt;Number&gt; Optional position parameter for seeking, but required if using <code>\"position\"</code> as <code>action</code> <p>Info</p> <p>Binary data needs to be converted to base64 to use it as an image. Example:</p> <pre><code>const src = `data:image/png;base64,${Buffer.from(thumbnail).toString(\n  \"base64\"\n)}`;\n</code></pre>"},{"location":"commands/#best-practices","title":"Best Practices","text":""},{"location":"commands/#tauri-global-window-object","title":"Tauri Global Window Object","text":"<p>While <code>window.__TAURI__</code> is technically available in HTML Widgets, you should not rely on <code>window.__TAURI__</code> inside HTML widgets.</p>"},{"location":"commands/#why","title":"Why?","text":"<ul> <li>HTML widgets run in a raw WebView \u2014 they don\u2019t have the same runtime guarantees as the main Delta Widgets environment.</li> <li><code>window.__TAURI__</code> can break or disappear if your page reloads, redirects, or changes context.</li> </ul>"},{"location":"commands/#recommended-approach","title":"Recommended approach","text":"<p>If your widget needs to talk to the backend (e.g., fetch system info, control media, run commands), you should bundle your widget with a frontend build tool instead of shipping raw HTML/JS files.</p> <p>This ensures the Tauri APIs (<code>@tauri-apps/api</code>) are available during runtime.</p>"},{"location":"commands/#option-1-use-a-framework-recommended","title":"Option 1: Use a Framework (Recommended)","text":"<p>Use a modern frontend framework and build your widget as a static output folder:</p> <p>React (Vite example):</p> <pre><code>npm create vite@latest my-widget -- --template react\ncd my-widget\nnpm install\n</code></pre> <p>Then in your code:</p> <pre><code>import { invoke } from \"@tauri-apps/api/core\";\n\nfunction App() {\n  async function getInfo() {\n    const info = await invoke(\"get_system_info\");\n    console.log(info);\n  }\n\n  return &lt;button onClick={getInfo}&gt;Get Info&lt;/button&gt;;\n}\n</code></pre> <p>Finally, build it:</p> <pre><code>npm run build\n</code></pre> <p>The output (<code>dist/</code>) can be dropped into Delta Widgets as your widget folder.</p> <p>Vue / Svelte / Solid \u2192 same flow, just scaffold with your framework\u2019s CLI (<code>npm create vue@latest</code>, <code>npm create svelte@latest</code>, etc.).</p>"},{"location":"commands/#option-2-use-a-bundler-only","title":"Option 2: Use a Bundler Only","text":"<p>If you prefer plain JavaScript/TypeScript but still want Tauri commands:</p> <pre><code>npm init vite@latest my-widget -- --template vanilla-ts\ncd my-widget\nnpm install\n</code></pre> <p>Now you can import:</p> <pre><code>import { invoke } from \"@tauri-apps/api/core\";\n\ninvoke(\"get_system_info\").then(console.log);\n</code></pre> <p>And again, <code>npm run build</code> \u2192 drop <code>dist/</code> into Delta Widgets.</p>"},{"location":"commands/#option-3-raw-html-widgets","title":"Option 3: Raw HTML Widgets","text":"<p>If you just want quick prototypes or static displays:</p> <ul> <li>Use <code>window.__TAURI__.invoke(\"command_name\")</code> directly.</li> <li>No build step required.</li> <li>Limited to globals exposed by Tauri.</li> </ul> <p>Example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;button onclick=\"getInfo()\"&gt;Get Info&lt;/button&gt;\n    &lt;script&gt;\n      async function getInfo() {\n        const info = await window.__TAURI__.invoke(\"get_system_info\");\n        console.log(info);\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"commands/#rule-of-thumb","title":"Rule of Thumb","text":"<ul> <li>Use raw HTML widgets for static UI or quick experiments.</li> <li>Use a bundled framework when you need <code>@tauri-apps/api</code> and more advanced features.</li> </ul>"},{"location":"contribution/","title":"Contribution","text":"<p>Refer to CONTRIBUTING.md</p>"},{"location":"events/","title":"Tauri Events","text":"<p>Some widgets need to react to system changes (e.g., media playback). For this, Delta Widgets exposes Tauri events that you can subscribe to.</p> <p>Example: Listening to <code>media_updated</code></p> <pre><code>import { invoke, listen } from \"@tauri-apps/api/core\";\n\nasync function setup() {\n  await listen(\"media_updated\", (event) =&gt; {\n    invoke(\"get_media\").then(console.log);\n  });\n}\n\nsetup();\n</code></pre> <p>This ensures your widget updates whenever the media session changes.</p> <p>Currently, you can only listen to <code>media_updated</code> which gets triggered whenever the media status changes.</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>This guide will help you install Delta Widgets and create your very first widget.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<ol> <li>Go to the Releases page.</li> <li>Download the latest Installer (<code>.exe</code> or <code>.msi</code>) for Windows.</li> <li>Run the installer and follow the setup steps.</li> <li>Once installed, you can launch Delta Widgets from the Start Menu.</li> </ol>"},{"location":"getting_started/#create-your-first-widget","title":"Create Your First Widget","text":"<ol> <li>Open Delta Widgets Builder (Create New button).</li> <li>Drag a Text Block onto the canvas.</li> <li>Type <code>Hello World</code> in the text box.</li> <li>Customize the font size, color, and alignment using the right panel.</li> <li>Click Preview \u2013 it will appear on your desktop instantly!</li> <li>Click Publish to install the widget, then close the window</li> <li>You can now find the widget on the Installed section, toggle the switch to hide/show the created widget.</li> </ol>"},{"location":"getting_started/#example-clock-widget","title":"Example: Clock Widget","text":"<p>Want to add a live clock?</p> <ul> <li>Add a Text Block</li> <li>Enter: <code>{{time:HH:mm}}</code></li> <li>Save \u2192 You now have a live updating clock on your desktop</li> </ul>"},{"location":"overview/","title":"Overview","text":"<p>Delta Widgets supports three different ways to create widgets. You can choose the method that best fits your use case \u2014 whether you prefer drag-and-drop building, writing your own HTML/CSS, or simply embedding an existing webpage.</p> <p></p>"},{"location":"overview/#visual-editor-widgets","title":"Visual Editor Widgets","text":"<p>The Visual Editor is the easiest way to build widgets without coding. It uses a drag-and-drop builder where you can place components, rearrange layouts, and apply styles.</p> <p></p>"},{"location":"overview/#available-components","title":"Available Components","text":"<ul> <li>Container / Grid \u2013 Structure your widget with flexible layouts. Use grids for multi-column designs.</li> <li>Text \u2013 Add static or dynamic text (supports expressions and variables).</li> <li>Image \u2013 Display images from local files, URLs, or variable sources.</li> <li>Progress Slider \u2013 Useful for volume bars, progress indicators, or custom metrics.</li> <li>Media Controls \u2013 Play, pause, skip, and display media playback info.</li> <li>Custom Button (planned) \u2013 Will allow adding custom actions.</li> </ul>"},{"location":"overview/#templates","title":"Templates","text":"<ul> <li>Start with built-in templates for common use cases (clocks, media players, system stats).</li> <li>Clone and customize templates to speed up widget creation.</li> </ul>"},{"location":"overview/#dynamic-variables","title":"Dynamic Variables","text":"<p>Visual Editor widgets support handlebar-like variables inside text and image components.</p> <p>Example:</p> <pre><code>{{time}}              \u2192 Displays current system time\n{{system:cpu_usage}}  \u2192 Displays CPU usage\n{{media:title}}       \u2192 Displays currently playing track title\n</code></pre> <p>You can also format some variables:</p> <pre><code>{{time:HH:mm:ss}}\n</code></pre>"},{"location":"overview/#publishing","title":"Publishing","text":"<p>Unless you publish your widget, it will show up in the \"Drafts\" section of the main window.</p> <p>Once you are done editing your widget, click on \"Publish\" to make it visible on the \"Installed\" section on the main window.</p> <p>From there you can enable/disable your widget.</p>"},{"location":"overview/#custom-html-widgets","title":"Custom HTML Widgets","text":"<p>For developers and advanced users, you can create widgets using custom HTML, CSS, and JavaScript.</p> <p>To add an HTML widget, click on <code>HTML</code> from the <code>Add</code> button, it will ask to open a folder containing an <code>index.html</code></p> <p>This gives you complete control over layout and behavior.</p>"},{"location":"overview/#features","title":"Features","text":"<ul> <li>Embed any HTML and style it with CSS.</li> <li>Add interactive behavior with JavaScript.</li> <li>Access Tauri commands for system or media data.</li> </ul>"},{"location":"overview/#tauri-commands","title":"Tauri Commands","text":"<p>You can call native Tauri commands to fetch live data:</p> <ul> <li><code>get_media</code> \u2192 Returns currently playing media info.</li> <li><code>get_system_info</code> \u2192 Returns system stats (CPU, memory, etc.).</li> </ul> <p>Warning</p> <p>Unlike the Visual Editor, you are responsible for updating and maintaining widget state in HTML widgets. See useVariableUpdater.ts for reference.</p>"},{"location":"overview/#example","title":"Example","text":"<pre><code>&lt;div class=\"widget\"&gt;\n  &lt;h2 id=\"track\"&gt;&lt;/h2&gt;\n  &lt;script&gt;\n    async function updateTrack() {\n      const info = await window.__TAURI__.invoke(\"get_media\");\n      document.getElementById(\"track\").textContent = info[0].title;\n    }\n    setInterval(updateTrack, 1000);\n  &lt;/script&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"overview/#making-a-widget-draggable","title":"Making a Widget Draggable","text":"<p>If you want to move your widget across the desktop, you need to define an area that acts as a drag handle.</p> <p>Any element with the style <code>-webkit-app-region: drag;</code> becomes a draggable region for the whole widget window.</p>"},{"location":"overview/#example-draggable-top-bar","title":"Example: Draggable Top Bar","text":"HTMLCSS <pre><code>&lt;div class=\"widget\"&gt;\n  &lt;!-- Draggable area --&gt;\n  &lt;div class=\"titlebar\"&gt;My Widget&lt;/div&gt;\n\n  &lt;!-- Normal content --&gt;\n  &lt;div class=\"content\"&gt;\n    &lt;p&gt;Hello from Delta Widgets!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.widget {\n  width: 200px;\n  background: #222;\n  color: white;\n  border-radius: 8px;\n  overflow: hidden;\n  font-family: sans-serif;\n}\n\n/* This makes the top bar draggable */\n.titlebar {\n  background: #444;\n  padding: 8px;\n  -webkit-app-region: drag;\n  cursor: move;\n}\n\n/* Content stays interactive (clickable) */\n.content {\n  padding: 12px;\n  -webkit-app-region: no-drag; /* ensures buttons/links inside are clickable */\n}\n</code></pre> <p>In this example:</p> <ul> <li>The title bar is draggable.</li> <li>The content area is interactive (you can click links, buttons, etc.).</li> </ul>"},{"location":"overview/#limitations","title":"Limitations","text":"<ul> <li>Dynamic variables (<code>{{time}}</code>, <code>{{media:title}}</code>, etc.) from the visual editor are not available here.</li> <li><code>window.__TAURI__</code> exists but not recommended (lost on redirects, fragile)</li> </ul>"},{"location":"overview/#why-dont-dynamic-variables-work-in-html-widgets","title":"Why don\u2019t dynamic variables (<code>{{...}}</code>) work in HTML widgets?","text":"<p>Dynamic variables like <code>{{time}}</code>, <code>{{media}}</code>, etc. are only available inside the Visual Editor. They're powered by the editor's own runtime, which injects and replaces variables in real-time.</p> <p>When you use an HTML widget (i.e. rendering your own <code>index.html</code>), it runs in a plain WebView context. This means:</p> <ul> <li>There's no runtime to parse/replace variables.</li> <li>Instead, you\u2019ll need to use Tauri commands (invoke) or events (like media_updated) to fetch the data you need.</li> </ul> <p>\ud83d\udc49 If you want templating with <code>{{variables}}</code>, build your widget in the Visual Editor.</p> <p>\ud83d\udc49 If you want full control with custom HTML/JS, use Tauri APIs directly.</p>"},{"location":"overview/#url-widgets","title":"URL Widgets","text":"<p>Sometimes you don't need to build from scratch \u2014 you can just load a webpage as a widget.</p> <p></p>"},{"location":"overview/#how-it-works","title":"How it works","text":"<ul> <li>Enter a URL, and the widget displays that webpage directly.</li> <li>Useful for dashboards, web apps, or embedding online tools.</li> </ul>"},{"location":"overview/#window-behavior","title":"Window Behavior","text":"<ul> <li>A title bar is added to URL widgets so you can drag the widget around your desktop.</li> <li>The title bar cannot be removed (it ensures the window remains draggable).</li> </ul>"},{"location":"overview/#limitations_1","title":"Limitations","text":"<ul> <li>You cannot directly inject variables or Tauri commands into URL widgets.</li> <li>They are sandboxed to display external content only.</li> </ul>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>\ud83c\udf10 Website</li> <li>\ud83d\udc19 GitHub Repo</li> </ul>"}]}